from aiogram import Bot, Dispatcher, types
import asyncio
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ]
)

# üîπ –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
success_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url="https://www.harvard.edu")]
    ]
)

start_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂ –ù–∞—á–∞—Ç—å", callback_data="start")]
    ]
)

@dp.message(Command("start"))
async def start(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–ª–µ–¥—É–π —ç—Ç–∏–º —à–∞–≥–∞–º:\n\n"
    text += "1Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è** –Ω–∏–∂–µ.\n"
    text += "2Ô∏è‚É£ –í–≤–µ–¥–∏ **—Ç–æ–∫–µ–Ω**.\n"
    text += "3Ô∏è‚É£ –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π ‚Äì –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ **–ü–µ—Ä–µ–π—Ç–∏** ‚úÖ"

    await message.answer(text, reply_markup=main_menu)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@dp.callback_query(lambda callback: callback.data == "register")
async def ask_token(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
    await callback.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(lambda callback: callback.data == "back")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await callback.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
@dp.message(lambda message: message.text and message.text != "–ü–µ—Ä–µ–π—Ç–∏")  
async def check_token(message: types.Message):
    if message.text == SECRET_TOKEN:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=success_menu)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    await bot.delete_webhook()  # –û—á–∏—â–∞–µ–º –≤–µ–±—Ö—É–∫
    await dp.start_polling(bot)  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())
